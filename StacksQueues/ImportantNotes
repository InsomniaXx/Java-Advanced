    *** Creating a Stack
ArrayDeque<Integer> stack = new ArrayDeque<>();

    *** Adding elements at the top of the stack
stack.push(element);

    *** Removing elements
Integer element = stack.pop();

    *** Getting the value of the topmost element
Integer element = stack.peek();

ArrayDeque<Integer> stack = new ArrayDeque<>();

    *** Utility Methods
int size = stack.size();
boolean isEmpty = stack.isEmpty();
boolean exists = stack.contains(2);


---------------------------------------------------------------------

    *** Creating a Queue
ArrayDeque<Integer> queue = new ArrayDeque<>();

    *** Adding elements at the end of the queue
queue.add(element);
queue.offer(element);

! add() – throws exception if queue is full
! offer() – returns false if queue is full

    *** Removing elements
element = queue.remove();
element = queue.poll();

    *** Check first element
element = queue.peek();

    *** Utility Methods
Integer element = queue.peeк(); -> checks the value of the first element
Integer size = queue.size(); -> returns queue size
Integer[] arr = queue.toArray(); -> converts the queue to an array
boolean exists = queue.contains(element); -> checks if element is in the queue

    *** Sorting Queue
PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(
                Comparator.comparing(Integer::intValue)
        );
